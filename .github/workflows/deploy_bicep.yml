name: Deploy Bicep and Trigger TS Repo

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy_bicep:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Login to Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 3Ô∏è‚É£ Check if the resource group has resources
      - name: List resources in resource group
        id: list_resources
        run: |
          RESOURCE_GROUP="rg-taskGen-dev-weu"
          RESOURCES=$(az resource list --resource-group $RESOURCE_GROUP --query "[].id" -o tsv | tr '\n' ',' | sed 's/,$//')
          echo "resources=$RESOURCES" >> $GITHUB_OUTPUT

      # 4Ô∏è‚É£ Deploy Bicep template
      - name: Deploy Bicep (complete mode)
        run: |
          RESOURCE_GROUP="rg-taskGen-dev-weu"
          LOCATION="westeurope"
          TEMPLATE_FILE="main.bicep"
          DEPLOYMENT_NAME="main-$(date +%s)"  # unique name using timestamp
      
          az group create --name $RESOURCE_GROUP --location $LOCATION
      
          az deployment group create \
            --name $DEPLOYMENT_NAME \
            --resource-group $RESOURCE_GROUP \
            --template-file $TEMPLATE_FILE \
            --parameters main.bicepparam \
            --parameters \
              jwtSecret="${{ secrets.JWT_SECRET }}" \
              ddimitrPass="${{ secrets.ddimitr_dummy_password }}" \
              helloPass="${{ secrets.hello_dummy_password }}"
              
      # 5Ô∏è‚É£ Capture App Service principal ID from previous deployment
      - name: Get App Service principal ID
        id: get_principal
        run: |
          RESOURCE_GROUP="rg-taskGen-dev-weu"
          DEPLOYMENT_NAME=$(az deployment group list --resource-group $RESOURCE_GROUP --query "[?contains(name,'main-')]|[-1].name" -o tsv)
          
          APP_PRINCIPAL_ID=$(az deployment group show \
            --resource-group $RESOURCE_GROUP \
            --name $DEPLOYMENT_NAME \
            --query "properties.outputs.appServicePrincipalId.value" -o tsv)
          
          echo "app_principal_id=$APP_PRINCIPAL_ID" >> $GITHUB_OUTPUT
          
      # 6Ô∏è‚É£ Deploy role assignments using AZURE_CREDENTIALS
      - name: Deploy Role Assignments
        run: |
          RESOURCE_GROUP="rg-taskGen-dev-weu"
          ROLES_DEPLOYMENT_NAME="roles-$(date +%s)"

          # Extract subscription ID from AZURE_CREDENTIALS JSON
          SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.subscriptionId')

          # Get the App Service principal ID from previous step
          APP_PRINCIPAL_ID="${{ steps.get_principal.outputs.app_principal_id }}"

          # Build role assignments JSON dynamically
          ROLE_ASSIGNMENTS_JSON=$(jq -n --arg pid "$APP_PRINCIPAL_ID" --arg sub "$SUBSCRIPTION_ID" '{
            "roleAssignments": {
              "value": [
                {
                  "principalId": $pid,
                  "roleDefinitionId": "/subscriptions/\($sub)/resourceGroups/rg-taskGen-dev-weu/providers/Microsoft.Authorization/roleDefinitions/21090545-7ca7-4776-b22c-e363652d74d2"
                },
                {
                  "principalId": $pid,
                  "roleDefinitionId": "/subscriptions/\($sub)/resourceGroups/rg-taskGen-dev-weu/providers/Microsoft.Authorization/roleDefinitions/0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3"
                }
              ]
            }
          }')

          # Deploy roles using idempotent roles.bicep
          set +e
          az deployment group create \
            --name $ROLES_DEPLOYMENT_NAME \
            --resource-group $RESOURCE_GROUP \
            --template-file roles.bicep \
            --parameters "$ROLE_ASSIGNMENTS_JSON"
          EXIT_CODE=$?
          set -e

          # Handle "already exists" gracefully
          if [ $EXIT_CODE -ne 0 ]; then
            echo "üîç Checking if role assignments already exist..."
            EXISTS=$(az role assignment list --assignee $APP_PRINCIPAL_ID --output tsv | grep -E "21090545|0a9a7e1f")
            if [ -n "$EXISTS" ]; then
              echo "‚úÖ Roles already exist ‚Äî continuing."
            else
              echo "‚ùå Role assignment failed for a real reason."
              exit 1
            fi
          else
            echo "‚úÖ Role assignments deployed successfully."
          fi

